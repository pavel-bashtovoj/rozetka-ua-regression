export default adapterFactory;
export namespace adapterFactory {
    function init(...args: any[]): Promise<JasmineAdapter>;
}
export class JasmineAdapter {
    constructor(cid: any, config: any, specs: any, capabilities: any, reporter: any);
    cid: any;
    config: any;
    capabilities: any;
    specs: any;
    jrunner: {};
    totalTests: number;
    jasmineNodeOpts: any;
    reporter: JasmineReporter;
    _hasTests: boolean;
    init(): Promise<JasmineAdapter>;
    _loadFiles(): void;
    _grep(suite: any): void;
    hasTests(): boolean;
    run(): Promise<any>;
    customSpecFilter(spec: any): boolean;
    wrapHook(hookName: any): (done: any) => any;
    prepareMessage(hookName: any): {
        type: any;
    };
    formatMessage(params: any): {
        type: any;
    };
    getExpectationResultHandler(jasmine: any): any;
    expectationResultHandler(origHandler: any): (passed: any, data: any) => any;
}
import JasmineReporter from "./reporter";
//# sourceMappingURL=index.d.ts.map